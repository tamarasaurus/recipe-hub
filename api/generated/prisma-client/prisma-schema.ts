// Code generated by Prisma (prisma@1.34.3). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateRecipe {
  count: Int!
}

type AggregateRecipeIngredient {
  count: Int!
}

type AggregateRecipeSource {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createRecipe(data: RecipeCreateInput!): Recipe!
  updateRecipe(data: RecipeUpdateInput!, where: RecipeWhereUniqueInput!): Recipe
  updateManyRecipes(data: RecipeUpdateManyMutationInput!, where: RecipeWhereInput): BatchPayload!
  upsertRecipe(where: RecipeWhereUniqueInput!, create: RecipeCreateInput!, update: RecipeUpdateInput!): Recipe!
  deleteRecipe(where: RecipeWhereUniqueInput!): Recipe
  deleteManyRecipes(where: RecipeWhereInput): BatchPayload!
  createRecipeIngredient(data: RecipeIngredientCreateInput!): RecipeIngredient!
  updateRecipeIngredient(data: RecipeIngredientUpdateInput!, where: RecipeIngredientWhereUniqueInput!): RecipeIngredient
  updateManyRecipeIngredients(data: RecipeIngredientUpdateManyMutationInput!, where: RecipeIngredientWhereInput): BatchPayload!
  upsertRecipeIngredient(where: RecipeIngredientWhereUniqueInput!, create: RecipeIngredientCreateInput!, update: RecipeIngredientUpdateInput!): RecipeIngredient!
  deleteRecipeIngredient(where: RecipeIngredientWhereUniqueInput!): RecipeIngredient
  deleteManyRecipeIngredients(where: RecipeIngredientWhereInput): BatchPayload!
  createRecipeSource(data: RecipeSourceCreateInput!): RecipeSource!
  updateRecipeSource(data: RecipeSourceUpdateInput!, where: RecipeSourceWhereUniqueInput!): RecipeSource
  updateManyRecipeSources(data: RecipeSourceUpdateManyMutationInput!, where: RecipeSourceWhereInput): BatchPayload!
  upsertRecipeSource(where: RecipeSourceWhereUniqueInput!, create: RecipeSourceCreateInput!, update: RecipeSourceUpdateInput!): RecipeSource!
  deleteRecipeSource(where: RecipeSourceWhereUniqueInput!): RecipeSource
  deleteManyRecipeSources(where: RecipeSourceWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  recipe(where: RecipeWhereUniqueInput!): Recipe
  recipes(where: RecipeWhereInput, orderBy: RecipeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Recipe]!
  recipesConnection(where: RecipeWhereInput, orderBy: RecipeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RecipeConnection!
  recipeIngredient(where: RecipeIngredientWhereUniqueInput!): RecipeIngredient
  recipeIngredients(where: RecipeIngredientWhereInput, orderBy: RecipeIngredientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RecipeIngredient]!
  recipeIngredientsConnection(where: RecipeIngredientWhereInput, orderBy: RecipeIngredientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RecipeIngredientConnection!
  recipeSource(where: RecipeSourceWhereUniqueInput!): RecipeSource
  recipeSources(where: RecipeSourceWhereInput, orderBy: RecipeSourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RecipeSource]!
  recipeSourcesConnection(where: RecipeSourceWhereInput, orderBy: RecipeSourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RecipeSourceConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Recipe {
  id: ID!
  name: String!
  duration: Int
  ingredients(where: RecipeIngredientWhereInput, orderBy: RecipeIngredientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RecipeIngredient!]
  portions: Int
  imageurl: String
  url: String!
  created: DateTime!
  updated: DateTime!
  categories: [String!]!
  calories: Int
  source: RecipeSource
}

type RecipeConnection {
  pageInfo: PageInfo!
  edges: [RecipeEdge]!
  aggregate: AggregateRecipe!
}

input RecipeCreatecategoriesInput {
  set: [String!]
}

input RecipeCreateInput {
  id: ID
  name: String!
  duration: Int
  ingredients: RecipeIngredientCreateManyWithoutRecipeInput
  portions: Int
  imageurl: String
  url: String!
  categories: RecipeCreatecategoriesInput
  calories: Int
  source: RecipeSourceCreateOneInput
}

input RecipeCreateOneWithoutIngredientsInput {
  create: RecipeCreateWithoutIngredientsInput
  connect: RecipeWhereUniqueInput
}

input RecipeCreateWithoutIngredientsInput {
  id: ID
  name: String!
  duration: Int
  portions: Int
  imageurl: String
  url: String!
  categories: RecipeCreatecategoriesInput
  calories: Int
  source: RecipeSourceCreateOneInput
}

type RecipeEdge {
  node: Recipe!
  cursor: String!
}

type RecipeIngredient {
  id: ID!
  recipe: Recipe!
  label: String!
  quantity: Float
  unit: String
}

type RecipeIngredientConnection {
  pageInfo: PageInfo!
  edges: [RecipeIngredientEdge]!
  aggregate: AggregateRecipeIngredient!
}

input RecipeIngredientCreateInput {
  id: ID
  recipe: RecipeCreateOneWithoutIngredientsInput!
  label: String!
  quantity: Float
  unit: String
}

input RecipeIngredientCreateManyWithoutRecipeInput {
  create: [RecipeIngredientCreateWithoutRecipeInput!]
  connect: [RecipeIngredientWhereUniqueInput!]
}

input RecipeIngredientCreateWithoutRecipeInput {
  id: ID
  label: String!
  quantity: Float
  unit: String
}

type RecipeIngredientEdge {
  node: RecipeIngredient!
  cursor: String!
}

enum RecipeIngredientOrderByInput {
  id_ASC
  id_DESC
  label_ASC
  label_DESC
  quantity_ASC
  quantity_DESC
  unit_ASC
  unit_DESC
}

type RecipeIngredientPreviousValues {
  id: ID!
  label: String!
  quantity: Float
  unit: String
}

input RecipeIngredientScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  label: String
  label_not: String
  label_in: [String!]
  label_not_in: [String!]
  label_lt: String
  label_lte: String
  label_gt: String
  label_gte: String
  label_contains: String
  label_not_contains: String
  label_starts_with: String
  label_not_starts_with: String
  label_ends_with: String
  label_not_ends_with: String
  quantity: Float
  quantity_not: Float
  quantity_in: [Float!]
  quantity_not_in: [Float!]
  quantity_lt: Float
  quantity_lte: Float
  quantity_gt: Float
  quantity_gte: Float
  unit: String
  unit_not: String
  unit_in: [String!]
  unit_not_in: [String!]
  unit_lt: String
  unit_lte: String
  unit_gt: String
  unit_gte: String
  unit_contains: String
  unit_not_contains: String
  unit_starts_with: String
  unit_not_starts_with: String
  unit_ends_with: String
  unit_not_ends_with: String
  AND: [RecipeIngredientScalarWhereInput!]
  OR: [RecipeIngredientScalarWhereInput!]
  NOT: [RecipeIngredientScalarWhereInput!]
}

type RecipeIngredientSubscriptionPayload {
  mutation: MutationType!
  node: RecipeIngredient
  updatedFields: [String!]
  previousValues: RecipeIngredientPreviousValues
}

input RecipeIngredientSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RecipeIngredientWhereInput
  AND: [RecipeIngredientSubscriptionWhereInput!]
  OR: [RecipeIngredientSubscriptionWhereInput!]
  NOT: [RecipeIngredientSubscriptionWhereInput!]
}

input RecipeIngredientUpdateInput {
  recipe: RecipeUpdateOneRequiredWithoutIngredientsInput
  label: String
  quantity: Float
  unit: String
}

input RecipeIngredientUpdateManyDataInput {
  label: String
  quantity: Float
  unit: String
}

input RecipeIngredientUpdateManyMutationInput {
  label: String
  quantity: Float
  unit: String
}

input RecipeIngredientUpdateManyWithoutRecipeInput {
  create: [RecipeIngredientCreateWithoutRecipeInput!]
  delete: [RecipeIngredientWhereUniqueInput!]
  connect: [RecipeIngredientWhereUniqueInput!]
  set: [RecipeIngredientWhereUniqueInput!]
  disconnect: [RecipeIngredientWhereUniqueInput!]
  update: [RecipeIngredientUpdateWithWhereUniqueWithoutRecipeInput!]
  upsert: [RecipeIngredientUpsertWithWhereUniqueWithoutRecipeInput!]
  deleteMany: [RecipeIngredientScalarWhereInput!]
  updateMany: [RecipeIngredientUpdateManyWithWhereNestedInput!]
}

input RecipeIngredientUpdateManyWithWhereNestedInput {
  where: RecipeIngredientScalarWhereInput!
  data: RecipeIngredientUpdateManyDataInput!
}

input RecipeIngredientUpdateWithoutRecipeDataInput {
  label: String
  quantity: Float
  unit: String
}

input RecipeIngredientUpdateWithWhereUniqueWithoutRecipeInput {
  where: RecipeIngredientWhereUniqueInput!
  data: RecipeIngredientUpdateWithoutRecipeDataInput!
}

input RecipeIngredientUpsertWithWhereUniqueWithoutRecipeInput {
  where: RecipeIngredientWhereUniqueInput!
  update: RecipeIngredientUpdateWithoutRecipeDataInput!
  create: RecipeIngredientCreateWithoutRecipeInput!
}

input RecipeIngredientWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  recipe: RecipeWhereInput
  label: String
  label_not: String
  label_in: [String!]
  label_not_in: [String!]
  label_lt: String
  label_lte: String
  label_gt: String
  label_gte: String
  label_contains: String
  label_not_contains: String
  label_starts_with: String
  label_not_starts_with: String
  label_ends_with: String
  label_not_ends_with: String
  quantity: Float
  quantity_not: Float
  quantity_in: [Float!]
  quantity_not_in: [Float!]
  quantity_lt: Float
  quantity_lte: Float
  quantity_gt: Float
  quantity_gte: Float
  unit: String
  unit_not: String
  unit_in: [String!]
  unit_not_in: [String!]
  unit_lt: String
  unit_lte: String
  unit_gt: String
  unit_gte: String
  unit_contains: String
  unit_not_contains: String
  unit_starts_with: String
  unit_not_starts_with: String
  unit_ends_with: String
  unit_not_ends_with: String
  AND: [RecipeIngredientWhereInput!]
  OR: [RecipeIngredientWhereInput!]
  NOT: [RecipeIngredientWhereInput!]
}

input RecipeIngredientWhereUniqueInput {
  id: ID
}

enum RecipeOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  duration_ASC
  duration_DESC
  portions_ASC
  portions_DESC
  imageurl_ASC
  imageurl_DESC
  url_ASC
  url_DESC
  created_ASC
  created_DESC
  updated_ASC
  updated_DESC
  calories_ASC
  calories_DESC
}

type RecipePreviousValues {
  id: ID!
  name: String!
  duration: Int
  portions: Int
  imageurl: String
  url: String!
  created: DateTime!
  updated: DateTime!
  categories: [String!]!
  calories: Int
}

type RecipeSource {
  id: ID!
  name: String!
}

type RecipeSourceConnection {
  pageInfo: PageInfo!
  edges: [RecipeSourceEdge]!
  aggregate: AggregateRecipeSource!
}

input RecipeSourceCreateInput {
  id: ID
  name: String!
}

input RecipeSourceCreateOneInput {
  create: RecipeSourceCreateInput
  connect: RecipeSourceWhereUniqueInput
}

type RecipeSourceEdge {
  node: RecipeSource!
  cursor: String!
}

enum RecipeSourceOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type RecipeSourcePreviousValues {
  id: ID!
  name: String!
}

type RecipeSourceSubscriptionPayload {
  mutation: MutationType!
  node: RecipeSource
  updatedFields: [String!]
  previousValues: RecipeSourcePreviousValues
}

input RecipeSourceSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RecipeSourceWhereInput
  AND: [RecipeSourceSubscriptionWhereInput!]
  OR: [RecipeSourceSubscriptionWhereInput!]
  NOT: [RecipeSourceSubscriptionWhereInput!]
}

input RecipeSourceUpdateDataInput {
  name: String
}

input RecipeSourceUpdateInput {
  name: String
}

input RecipeSourceUpdateManyMutationInput {
  name: String
}

input RecipeSourceUpdateOneInput {
  create: RecipeSourceCreateInput
  update: RecipeSourceUpdateDataInput
  upsert: RecipeSourceUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: RecipeSourceWhereUniqueInput
}

input RecipeSourceUpsertNestedInput {
  update: RecipeSourceUpdateDataInput!
  create: RecipeSourceCreateInput!
}

input RecipeSourceWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [RecipeSourceWhereInput!]
  OR: [RecipeSourceWhereInput!]
  NOT: [RecipeSourceWhereInput!]
}

input RecipeSourceWhereUniqueInput {
  id: ID
  name: String
}

type RecipeSubscriptionPayload {
  mutation: MutationType!
  node: Recipe
  updatedFields: [String!]
  previousValues: RecipePreviousValues
}

input RecipeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RecipeWhereInput
  AND: [RecipeSubscriptionWhereInput!]
  OR: [RecipeSubscriptionWhereInput!]
  NOT: [RecipeSubscriptionWhereInput!]
}

input RecipeUpdatecategoriesInput {
  set: [String!]
}

input RecipeUpdateInput {
  name: String
  duration: Int
  ingredients: RecipeIngredientUpdateManyWithoutRecipeInput
  portions: Int
  imageurl: String
  url: String
  categories: RecipeUpdatecategoriesInput
  calories: Int
  source: RecipeSourceUpdateOneInput
}

input RecipeUpdateManyMutationInput {
  name: String
  duration: Int
  portions: Int
  imageurl: String
  url: String
  categories: RecipeUpdatecategoriesInput
  calories: Int
}

input RecipeUpdateOneRequiredWithoutIngredientsInput {
  create: RecipeCreateWithoutIngredientsInput
  update: RecipeUpdateWithoutIngredientsDataInput
  upsert: RecipeUpsertWithoutIngredientsInput
  connect: RecipeWhereUniqueInput
}

input RecipeUpdateWithoutIngredientsDataInput {
  name: String
  duration: Int
  portions: Int
  imageurl: String
  url: String
  categories: RecipeUpdatecategoriesInput
  calories: Int
  source: RecipeSourceUpdateOneInput
}

input RecipeUpsertWithoutIngredientsInput {
  update: RecipeUpdateWithoutIngredientsDataInput!
  create: RecipeCreateWithoutIngredientsInput!
}

input RecipeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  duration: Int
  duration_not: Int
  duration_in: [Int!]
  duration_not_in: [Int!]
  duration_lt: Int
  duration_lte: Int
  duration_gt: Int
  duration_gte: Int
  ingredients_every: RecipeIngredientWhereInput
  ingredients_some: RecipeIngredientWhereInput
  ingredients_none: RecipeIngredientWhereInput
  portions: Int
  portions_not: Int
  portions_in: [Int!]
  portions_not_in: [Int!]
  portions_lt: Int
  portions_lte: Int
  portions_gt: Int
  portions_gte: Int
  imageurl: String
  imageurl_not: String
  imageurl_in: [String!]
  imageurl_not_in: [String!]
  imageurl_lt: String
  imageurl_lte: String
  imageurl_gt: String
  imageurl_gte: String
  imageurl_contains: String
  imageurl_not_contains: String
  imageurl_starts_with: String
  imageurl_not_starts_with: String
  imageurl_ends_with: String
  imageurl_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  created: DateTime
  created_not: DateTime
  created_in: [DateTime!]
  created_not_in: [DateTime!]
  created_lt: DateTime
  created_lte: DateTime
  created_gt: DateTime
  created_gte: DateTime
  updated: DateTime
  updated_not: DateTime
  updated_in: [DateTime!]
  updated_not_in: [DateTime!]
  updated_lt: DateTime
  updated_lte: DateTime
  updated_gt: DateTime
  updated_gte: DateTime
  calories: Int
  calories_not: Int
  calories_in: [Int!]
  calories_not_in: [Int!]
  calories_lt: Int
  calories_lte: Int
  calories_gt: Int
  calories_gte: Int
  source: RecipeSourceWhereInput
  AND: [RecipeWhereInput!]
  OR: [RecipeWhereInput!]
  NOT: [RecipeWhereInput!]
}

input RecipeWhereUniqueInput {
  id: ID
  url: String
}

type Subscription {
  recipe(where: RecipeSubscriptionWhereInput): RecipeSubscriptionPayload
  recipeIngredient(where: RecipeIngredientSubscriptionWhereInput): RecipeIngredientSubscriptionPayload
  recipeSource(where: RecipeSourceSubscriptionWhereInput): RecipeSourceSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
}

input UserUpdateManyMutationInput {
  name: String
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  name: String
}
`