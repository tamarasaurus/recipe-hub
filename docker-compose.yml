version: '3.4'

services:
  postgres:
    image: postgres
    restart: always
    environment:
      POSTGRES_PASSWORD: postgres

  api:
    restart: always
    build:
      context: api
    command: 'npm start'
    environment:
      REACT_APP_API_URL: ${API_URL}
      POSTGRES_HOST: 'postgres://postgres:postgres@postgres:5432/postgres'
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      REDIS_URL: 'redis://cache:6379'
      API_URL: 'http://app:8000'
      SESSION_SECRET: ${SESSION_SECRET}
      ENABLE_DATABASE_SSL: ${ENABLE_DATABASE_SSL:-0}
    ports:
      - 8000:8000
    volumes:
      - ./node_modules:/usr/src/app/node_modules
      - ./frontend/node_modules:/usr/src/app/frontend/node_modules
      - ./api:/usr/src/app/api

  api-nginx:
    image: nginx:alpine
    volumes:
      - ./api/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - api

  frontend-nginx:
    build:
      context: frontend
    environment:
      REACT_APP_API_URL: 'http://nginx/api'

  nginx:
    image: nginx:alpine
    restart: on-failure
    build:
      context: nginx
    depends_on:
      - frontend-nginx
      - api-nginx
    ports:
      - 80:80
      - 443:443
    restart: on-failure
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./frontend/build:/usr/src/app

  # Move the Dockerfile inside the scraper folder
  scraper:
    image: scraper
    build:
      context: .
    environment:
      REDIS_URL: 'redis://cache:6379'
      POSTGRES_HOST: 'postgres'
      API_URL: 'http://app:8000'
    depends_on:
      - redis

  redis:
    image: redis
    container_name: cache
    ports:
      - 6379:6379

volumes:
  postgres: ~
