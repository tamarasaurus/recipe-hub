user  nginx;
worker_processes auto;

error_log  /dev/stderr debug;
pid        /var/run/nginx.pid;

events {
    worker_connections  4096;
    multi_accept        on;
    use                 epoll;
}

http {

    server_tokens   off;

    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     on;

    keepalive_requests 100000;

    send_timeout            10;
    client_header_timeout   10;
    client_body_timeout     10;
    client_max_body_size    1m;
    client_body_buffer_size 1m;

    reset_timedout_connection on;

    gzip              on;
    gzip_vary         on;
    gzip_min_length   1000;
    gzip_proxied      expired no-cache no-store private auth;
    gzip_types        text/plain text/css text/xml text/javascript application/javascript application/json application/xml application/hal+json application/vnd.error+json application/vnd.siren+json;
    gzip_disable      "MSIE [1-6]\.";

    open_file_cache          max=2000 inactive=20s;
    open_file_cache_valid    60s;
    open_file_cache_min_uses 5;
    open_file_cache_errors   off;

    log_format proxy '[$time_local] response_time: $upstream_response_time - status: $upstream_status: "$request"';
    access_log /dev/stdout proxy;

    # upstream front {
    #     server frontend;
    #     keepalive 32;
    # }

    upstream api-nginx {
        server api-nginx;
        keepalive 32;
    }

    add_header 'Access-Control-Allow-Origin' '*' always;
    add_header 'Access-Control-Allow-Methods' 'OPTIONS, GET, POST, PUT, PATCH, DELETE' always;
    add_header 'Access-Control-Allow-Headers' 'Authorization, Accept' always;
    add_header 'Access-Control-Expose-Headers' 'Cache-Control, Content-Language, Content-Type, Expires, Last-Modified, Pragma, Link' always;

    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    proxy_http_version 1.1;

    server {
        listen [::]:80 ipv6only=off;
        if ($request_method != GET) {
            return 308 https://$host$request_uri;
        }
        return 301 https://$host$request_uri;
    }

    server {
        root /usr/src/app;

        location /api/ {
            proxy_pass http://api-nginx;
        }

        location / {
            proxy_pass http://frontend-nginx;
            http2_push_preload on;
        }
    }
}
